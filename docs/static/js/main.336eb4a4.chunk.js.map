{"version":3,"sources":["components/card/card.tsx","components/card/hooks/use-card.ts","components/deck/deck.tsx","components/settings/icon/settings-icon.tsx","components/settings/settings.tsx","components/app/app.tsx","register-service-worker.ts","index.tsx","constants/shuffle.ts"],"names":["Card","_ref","card","set","_useCard","_useState","useState","_useState2","Object","slicedToArray","fadingOut","setFadingOut","useEffect","timeout","window","setTimeout","bottomCard","clearTimeout","useGlobal","global","cardId","setId","index","deck","findIndex","_ref2","s","c","toConsumableArray","slice","concat","active","length","className","handleClick","e","preventDefault","useCard","cardInfo","cards","setInfo","sets","react_default","a","createElement","href","path","onClick","alt","name","src","ext","mapCards","reactn_default","components_card_card","key","Deck","_useGlobal","_useGlobal3","children","map","SettingsIcon","Settings","icon_settings_icon","App","Fragment","settings","components_deck_deck","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","planechaseAnthologyDeck","arr","x","y","Math","floor","random","shuffle","setGlobal","ReactDOM","render","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.336eb4a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport cards from '../../cards.json';\r\nimport './card.scss';\r\nimport useCard from './hooks/use-card';\r\n\r\ninterface Props {\r\n  card: number;\r\n  set: number;\r\n}\r\n\r\nconst Card = ({ card, set }: Props) => {\r\n  const { className, handleClick } = useCard(card, set);\r\n  const cardInfo = cards.cards[card];\r\n  const setInfo = cards.sets[set];\r\n  return (\r\n    <a\r\n      className={className}\r\n      href={`#${setInfo.path}/${cardInfo.path}`}\r\n      onClick={handleClick}\r\n    >\r\n      <img\r\n        alt={cards.cards[card].name}\r\n        src={`images/${setInfo.path}/${cardInfo.path}.${setInfo.ext}`}\r\n      />\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useEffect, useState } from 'react';\r\nimport { useGlobal } from 'reactn';\r\n\r\ntype ClickHandler = (e: React.MouseEvent<HTMLAnchorElement>) => void;\r\n\r\ninterface CardHook {\r\n  className: string;\r\n  handleClick: ClickHandler;\r\n}\r\n\r\nexport default function useCard(card: number, set: number): CardHook {\r\n  const [ fadingOut, setFadingOut ] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      let timeout: number;\r\n      if (fadingOut) {\r\n        timeout = window.setTimeout(() => {\r\n          bottomCard(card, set);\r\n        }, 500);\r\n      }\r\n      return () => {\r\n        window.clearTimeout(timeout);\r\n      };\r\n    }\r\n  );\r\n\r\n  const bottomCard = useGlobal((global, cardId: number, setId: number) => {\r\n    const findCard = ([ s, c ]: [ number, number ]) => s === setId && c === cardId;\r\n    const index = global.deck.findIndex(findCard);\r\n    return {\r\n      deck: [\r\n        ...global.deck.slice(0, index),\r\n        global.deck[global.active],\r\n        ...global.deck.slice(index + 1, global.active),\r\n        ...global.deck.slice(global.active + 1, global.deck.length),\r\n        [ setId, cardId ]\r\n      ]\r\n    };\r\n  });\r\n\r\n  const className =\r\n    fadingOut ?\r\n      'card card-fading-out' :\r\n      'card';\r\n\r\n  const handleClick: ClickHandler = e => {\r\n    e.preventDefault();\r\n    setFadingOut(true);\r\n  };\r\n\r\n  return { className, handleClick };\r\n};\r\n","import React, { useGlobal } from 'reactn';\r\nimport Card from '../card/card';\r\nimport './deck.scss';\r\n\r\ntype CardData = [ number, number ];\r\n\r\nconst mapCards = ([ set, card ]: [ number, number ]) =>\r\n  <Card\r\n    card={card}\r\n    key={set + '/' + card}\r\n    set={set}\r\n  />;\r\n\r\nconst Deck = () => {\r\n  const [ active ] = useGlobal<number>('active');\r\n  const [ deck ] = useGlobal<CardData[]>('deck');\r\n  return (\r\n    <div\r\n      children={deck.slice(0, active).map(mapCards)}\r\n      className=\"deck\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Deck;\r\n","import React from 'react';\r\nimport './settings-icon.scss';\r\n\r\nconst SettingsIcon = () =>\r\n  <div className=\"settings-icon\">\r\n    âš™\r\n  </div>;\r\n\r\nexport default SettingsIcon;\r\n","import React from 'react';\r\nimport SettingsIcon from './icon/settings-icon';\r\n\r\nconst Settings = () =>\r\n  <SettingsIcon />;\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport Deck from '../deck/deck';\r\nimport Settings from '../settings/settings';\r\n\r\nconst App = () =>\r\n  <>\r\n    <Settings />\r\n    <Deck />\r\n  </>;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { setGlobal } from 'reactn';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/screen.scss';\r\nimport cards from './cards.json';\r\nimport App from './components/app/app';\r\nimport shuffle from './constants/shuffle';\r\nimport { register } from './register-service-worker';\r\n\r\nconst planechaseAnthologyDeck = cards.sets[2].cards.map(card => [ 2, card ]);\r\nshuffle(planechaseAnthologyDeck);\r\n\r\nsetGlobal({\r\n  active: 1,\r\n  deck: planechaseAnthologyDeck\r\n});\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nregister();\r\n","export default function shuffle(arr: any[]): any[] {\r\n  for (let x: number = arr.length - 1; x > 0; x--) {\r\n    const y: number = Math.floor(Math.random() * (x + 1));\r\n    [ arr[x], arr[y] ] = [ arr[y], arr[x] ];\r\n  }\r\n  return arr;\r\n}\r\n"],"sourceRoot":""}