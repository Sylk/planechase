{"version":3,"sources":["components/card/card.js","components/deck/deck.js","components/settings/icon/settings-icon.js","components/settings/settings.js","components/app/app.js","register-service-worker.js","index.js","constants/shuffle.js"],"names":["Card","_ref3","card","set","_useCard","_useState","useState","_useState2","Object","slicedToArray","fadingOut","setFadingOut","useEffect","timeout","setTimeout","bottomCard","clearTimeout","useGlobal","global","cardId","setId","index","deck","findIndex","_ref","_ref2","s","c","toConsumableArray","slice","concat","active","length","className","handleClick","e","preventDefault","useCard","cardInfo","cards","setInfo","sets","reactn_default","a","createElement","href","path","onClick","alt","name","src","ext","mapCards","components_card_card","key","Deck","_useGlobal","_useGlobal3","children","map","SettingsIcon","react_default","Settings","icon_settings_icon","App","Fragment","settings","components_deck_deck","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","planechaseAnthologyDeck","arr","x","y","Math","floor","random","shuffle","setGlobal","ReactDOM","render","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e725eaba.chunk.js","sourcesContent":["import React, { useEffect, useGlobal, useState } from 'reactn';\r\nimport cards from '../../cards';\r\nimport './card.scss';\r\n\r\nconst useCard = (card, set) => {\r\n  const [ fadingOut, setFadingOut ] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      let timeout = null;\r\n      if (fadingOut) {\r\n        timeout = setTimeout(() => {\r\n          bottomCard(card, set);\r\n        }, 500);\r\n      }\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  );\r\n\r\n  const bottomCard = useGlobal((global, cardId, setId) => {\r\n    const findCard = ([ s, c ]) => s === setId && c === cardId;\r\n    const index = global.deck.findIndex(findCard);\r\n    return {\r\n      deck: [\r\n        ...global.deck.slice(0, index),\r\n        global.deck[global.active],\r\n        ...global.deck.slice(index + 1, global.active),\r\n        ...global.deck.slice(global.active + 1, global.deck.length),\r\n        [ setId, cardId ]\r\n      ]\r\n    };\r\n  });\r\n\r\n  const className =\r\n    fadingOut ?\r\n      'card card-fading-out' :\r\n      'card';\r\n\r\n  const handleClick = e => {\r\n    e.preventDefault();\r\n    setFadingOut(true);\r\n  };\r\n\r\n  return { className, handleClick };\r\n};\r\n\r\nconst Card = ({ card, set }) => {\r\n  const { className, handleClick } = useCard(card, set);\r\n  const cardInfo = cards.cards[card];\r\n  const setInfo = cards.sets[set];\r\n  return (\r\n    <a\r\n      className={className}\r\n      href={`#${setInfo.path}/${cardInfo.path}`}\r\n      onClick={handleClick}\r\n    >\r\n      <img\r\n        alt={cards.cards[card].name}\r\n        src={`images/${setInfo.path}/${cardInfo.path}.${setInfo.ext}`}\r\n      />\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useGlobal } from 'reactn';\r\nimport Card from '../card/card';\r\nimport './deck.scss';\r\n\r\nconst mapCards = ([ set, card ]) =>\r\n  <Card\r\n    card={card}\r\n    key={set + '/' + card}\r\n    set={set}\r\n  />;\r\n\r\nconst Deck = () => {\r\n  const [ active ] = useGlobal('active');\r\n  const [ deck ] = useGlobal('deck');\r\n  return (\r\n    <div\r\n      children={deck.slice(0, active).map(mapCards)}\r\n      className=\"deck\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Deck;\r\n","import React from 'react';\r\nimport './settings-icon.scss';\r\n\r\nconst SettingsIcon = () =>\r\n  <div className=\"settings-icon\">\r\n    âš™\r\n  </div>;\r\n\r\nexport default SettingsIcon;\r\n","import React from 'react';\r\nimport SettingsIcon from './icon/settings-icon';\r\n\r\nconst Settings = () =>\r\n  <SettingsIcon />;\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport Deck from '../deck/deck';\r\nimport Settings from '../settings/settings';\r\n\r\nconst App = () =>\r\n  <>\r\n    <Settings />\r\n    <Deck />\r\n  </>;\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { setGlobal } from 'reactn';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/screen.scss';\r\nimport cards from './cards';\r\nimport App from './components/app/app';\r\nimport shuffle from './constants/shuffle';\r\nimport registerServiceWorker from './register-service-worker';\r\n\r\nconst planechaseAnthologyDeck = cards.sets[2].cards.map(card => [ 2, card ]);\r\nshuffle(planechaseAnthologyDeck);\r\n\r\nsetGlobal({\r\n  active: 1,\r\n  deck: planechaseAnthologyDeck\r\n});\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nregisterServiceWorker();\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n","export default arr => {\r\n  for (let x = arr.length - 1; x > 0; x--) {\r\n    const y = Math.floor(Math.random() * (x + 1));\r\n    [ arr[x], arr[y] ] = [ arr[y], arr[x] ];\r\n  }\r\n};\r\n"],"sourceRoot":""}